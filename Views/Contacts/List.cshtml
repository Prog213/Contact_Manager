@model List<Contact_Manager.Models.Contact>
@{
}

<div class="container mt-3">
    <h2>List of Contacts</h2>
</div>

<div class="container mt-3">
    @if (Model != null && Model.Any())
    {
        <table class="table" id="contactsTable">
            <thead class="thead-dark">
                <tr style="cursor:pointer">
                    <th scope="col" onclick="sortTable(0)">ID</th>
                    <th scope="col" onclick="sortTable(1)">Name</th>
                    <th scope="col" onclick="sortTable(2)">Date of Birth</th>
                    <th scope="col" onclick="sortTable(3)">Married</th>
                    <th scope="col" onclick="sortTable(4)">Phone</th>
                    <th scope="col" onclick="sortTable(5)">Salary</th>
                    <th scope="col">Operations</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var contact in Model)
                {
                    <tr>
                        <td>@contact.Id</td>
                        <td contenteditable="false" class="editable">@contact.Name</td>
                        <td>
                            <span class="date-display">@contact.DateOfBirth.ToShortDateString()</span>
                            <input type="date" class="form-control date-input d-none" value="@contact.DateOfBirth.ToString("yyyy-MM-dd")" />
                        </td>
                        <td contenteditable="false" class="editable">@contact.Married</td>
                        <td contenteditable="false" class="editable">@contact.Phone</td>
                        <td contenteditable="false" class="editable">@contact.Salary.ToString("0.##")</td>
                        <td>
                            <div class="d-inline">
                                <button class="btn btn-primary btn-sm edit-btn">Edit</button>
                                <button class="btn btn-success btn-sm save-btn" style="display:none;">Save</button>
                                <form asp-action="Delete" class="d-inline" 
                                    asp-controller="Contacts" asp-route-id="@contact.Id" method="post">
                                    <button type="submit" 
                                        class="btn btn-danger btn-sm">Delete</button>
                                </form>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
    else
    {
        <div class="alert alert-warning" role="alert">
            No Contacts found.
        </div>
    }

    <div class="mb-3">
        <label class="form-label">Upload a CSV file</label>
        <input type="file" class="form-control" id="fileUpload" />
    </div>
</div>

@section Scripts {
    <script>
        // Inline editing
        document.querySelectorAll('.edit-btn').forEach(button => {
            button.addEventListener('click', function () {
                const row = this.closest('tr');
                const saveBtn = row.querySelector('.save-btn');
                const editBtn = row.querySelector('.edit-btn');

                row.querySelectorAll('.editable').forEach(cell => {
                    cell.contentEditable = true;
                    cell.classList.add('editing');
                });

                const dateDisplay = row.querySelector('.date-display');
                const dateInput = row.querySelector('.date-input');
                dateDisplay.classList.add('d-none');
                dateInput.classList.remove('d-none');

                editBtn.style.display = 'none';
                saveBtn.style.display = 'inline-block';
            });
        });

        //Saving changes
        document.querySelectorAll('.save-btn').forEach(button => {
            button.addEventListener('click', async function () {
                const row = this.closest('tr');
                const saveBtn = row.querySelector('.save-btn');
                const editBtn = row.querySelector('.edit-btn');

                const id = row.cells[0].textContent.trim();
                const updatedData = {
                    name: row.cells[1].textContent.trim(),
                    dateOfBirth: row.querySelector('.date-input').value,
                    married: row.cells[3].textContent.trim() === 'true',
                    phone: row.cells[4].textContent.trim(),
                    salary: parseFloat(row.cells[5].textContent.trim())
                };

                try {
                    const response = await fetch(`/Contacts/Edit/${id}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(updatedData)
                    });

                    if (response.ok) {
                        alert('Record updated successfully!');
                    } else {
                        alert('Failed to update the record.');
                    }
                } catch (error) {
                    alert(`Error: ${error.message}`);
                }

                row.querySelectorAll('.editable').forEach(cell => {
                    cell.contentEditable = false;
                    cell.classList.remove('editing');
                });

                const dateDisplay = row.querySelector('.date-display');
                const dateInput = row.querySelector('.date-input');
                const date = new Date(dateInput.value);
                const formattedDate = `${String(date.getDate()).padStart(2, '0')}.${String(date.getMonth() + 1).padStart(2, '0')}.${date.getFullYear()}`;
                dateDisplay.textContent = formattedDate;
                dateDisplay.classList.remove('d-none');
                dateInput.classList.add('d-none');

                editBtn.style.display = 'inline-block';
                saveBtn.style.display = 'none';
            });
        });

        // Sorting
        let sortDirection = {};

        function sortTable(columnIndex) {
            const table = document.getElementById('contactsTable');
            const tbody = table.tBodies[0];
            const rows = Array.from(tbody.rows);
            const currentDirection = sortDirection[columnIndex] || 'asc';

            const newDirection = currentDirection === 'asc' ? 'desc' : 'asc';
            sortDirection[columnIndex] = newDirection;

            const isNumeric = columnIndex === 0 || columnIndex === 5;

            rows.sort((a, b) => {
                const aText = a.cells[columnIndex].textContent.trim();
                const bText = b.cells[columnIndex].textContent.trim();

                if (isNumeric) {
                    return newDirection === 'asc' 
                        ? parseFloat(aText) - parseFloat(bText) 
                        : parseFloat(bText) - parseFloat(aText);
                } else {
                    return newDirection === 'asc'
                        ? aText.localeCompare(bText)
                        : bText.localeCompare(aText);
                }
            });

            rows.forEach(row => tbody.appendChild(row));
        }

        //File uploading
        const featuredUploadElement = document.getElementById('fileUpload');
        featuredUploadElement.addEventListener('change', async function (e) {
            const file = e.target.files[0];
            if (!file) return;

            const allowedExtensions = ['.csv'];
            const extension = file.name.split('.').pop().toLowerCase();
            if (!allowedExtensions.includes(`.${extension}`)) {
                alert('Invalid file type. Please upload a CSV file.');
                return;
            }

            let data = new FormData();
            data.append('file', file);

            try {
                const response = await fetch(`/api/FileUpload`, {
                    method: 'POST',
                    body: data
                });

                if (response.ok) {
                    alert('File uploaded successfully!');
                    location.reload();
                } else {
                    const errorMessage = await response.text();
                    alert(`File upload failed: ${errorMessage}`);
                }
            } catch (error) {
                alert(`An error occurred: ${error.message}`);
            }
        });
    </script>
}
